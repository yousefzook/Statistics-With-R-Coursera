nycflights[1]
nycflights[1][1]
nycflights[1][1][1]
nycflights[1][1][2]
nycflights[1][2]
head(nycflights)
str(nycflights)
str(nycflights)
nycflights
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
library(statsr)
library(dplyr)
library(ggplot2)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay, y = size)) + geom_histogram(binwidth = 10)
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram(binwidth = 10)
rdu_flights <- nycflights %>% filter(dest = "RDU")
rdu_flights <- nycflights %>% filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) + geom_histogram()
rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
head(rdu_flights)
# type your code for Question 1 here, and Knit
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
# type your code for Question 1 here, and Knit
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
# type your code for Question 1 here, and Knit
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
nrow(sfo_feb_flights)
rdu_summary <- rdu_flights %>% summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
rdu_summary
# type your code for Question 2 here, and Knit
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 10)
sfo_summary <- sfo_feb_flights %>% summarise(mean_sfo = mean(arr_delay), sd_sfo = sd(arr_delay), n = n())
# type your code for Question 2 here, and Knit
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram(binwidth = 10)
sfo_summary <- sfo_feb_flights %>% summarise(mean_sfo = mean(arr_delay), sd_sfo = sd(arr_delay), n = n())
sfo_summary
# type your code for Question 3 here, and Knit
sfo_feb_flights %>% group_by(carrier) %>% summarise(median = median(arr_delay), iqr = IQR(arr_delay))
nycflights %>% group_by(month) %>% summarise(mean = mean(dep_delay)) %>% arrange(desc(mean))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) + geom_boxplot()
nycflights <- nycflights %>% mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights[dep_type]
nycflights(dep_type)
nycflights %>% group_by(origin) %>% summarise(ot_dep_rate = sum(dep_type == 'on time') / n()) %>% arrange(desc(ot_dep_rate))
# type your code for Question 8 here, and Knit
nycflights <- nycflights %>% mutate(avg_speed = distance * 60 / air_time)
nycflights %>% select(avg_speed, tailnum) %>% arrange(desc(avg_speed))
# type your code for Question 9 here, and Knit
ggplot(nycflights, aes(x = avg_speed, y = distance)) + geom_point()
# type your code for Question 9 here, and Knit
ggplot(nycflights, aes(x = distance, y = avg_speed)) + geom_point()
# type your code for Question 10 here, and Knit
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0 , "on time", "delayed"))
nycflights %>%  group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>% arrange(desc(ot_arr_rate))
library(statsr)
library(dplyr)
library(ggplot2)
data("kobe_basket")
head(kobe_basket)
kobe_streak <- calc_streak(kobe_basket$shot)
ggplot(data = kobe_streak, aes(x = length)) + geom_histogram(binwidth = 1)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size=1, replace=TRUE)
sample(coin_outcomes, size=2, replace=TRUE)
sample(coin_outcomes, size=2, replace=FALSE)
sample(coin_outcomes, size = 3, replace=FALSE)
sample(coin_outcomes, size = 3, replace= true)
sample(coin_outcomes, size = 3, replace= TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
table(sample(coin_outcomes, size = 100, replace = TRUE))
table(sample(coin_outcomes, size = 1000, replace = TRUE))
table(sample(coin_outcomes, size = 100000, replace = TRUE))
table(sample(coin_outcomes, size = 100000, replace = TRUE , prob = c(0.2, 0.8)))
?sample
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 1, replace = TRUE)
# type your code for the Exercise here, and Knit
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45, 0.55))
table(sim_basket)
# type your code for the Exercise here, and Knit
sim_streak <- calc_streak(sim_basket)
# type your code for the Exercise here, and Knit
ggplot(data = sim_streak, aes(x = length)) + geom_histogram(binwidth = 1)
selected_nzes2011
selected_nzes2011 %>%
select(jpartyvote, jdiffvoting, _singlefav) %>%
load("selected_nzes2011.RData")
library(dplyr)
selected_nzes2011 %>%
select(jpartyvote, jdiffvoting, _singlefav) %>%
selected_nzes2011 %>%
select(jpartyvote, jdiffvoting, _singlefav) %>%
str()
select(jpartyvote, jdiffvoting, _singlefav)
selected_nzes2011
head(selected_nzes2011)
selected_nzes2011[0]
?selected_nzes2011
selected_nzes2011 %>% select(jpartyvote, jdiffvoting, singlefav) %>% str()
selected_nzes2011 %>% select(jpartyvote, jdiffvoting, _singlefav) %>% str()
selected_nzes2011 %>% select(jpartyvote, jdiffvoting) %>% str()
selected_nzes2011 %>%
select(jpartyvote, jdiffvoting, X_singlefav) %>%
str()
selected_nzes2011
?grep
library(ggplot2)
library(dplyr)
load("brfss2013.RData")
library(ggplot2)
library(dplyr)
load("brfss2013.RData")
setwd("~/statistics with R assignments/Course_1_Capestone_Project")
load("brfss2013.RData")
nrow(brfss2013)
names(brfss2013)
nrow(brfss2013)
names(brfss2013)
grep("_state", names(brfss2013), value=TRUE)
head(brfss2013)
head(brfss2013)
dim(brfss2013)
str(brfss2013)
summary(brfss2013)
names(brfss2013$marital)
unique(brfss2013$marital)
unique(brfss2013$sex)
unique(brfss2013$genhlth)
unique(brfss2013$marital)
unique(brfss2013$sex)
unique(brfss2013$genhlth)
count(brfss2013, "gender")
count(brfss2013, "sex")
count(brfss2013, brfss2013$sex)
count(brfss2013$sex)
count(brfss2013, c(brfss2013$sex, brfss2013$marital))
count(brfss2013, c("sex", "marital"))
count(brfss2013, (brfss2013$sex, brfss2013$marital))
brfss2013$marital
count(brfss2013, brfss2013$sex, brfss2013$marital)
filter(count(brfss2013, brfss2013$sex, brfss2013$marital), !is.na())
count_marital <-  count(brfss2013, brfss2013$sex, brfss2013$marital)
names(count_marital) <- c("sex", "marital", "count")
count_marital_filterd <- filter(count_marital, !is.na(sex))
count_marital_filterd
count_marital <-  count(brfss2013, brfss2013$sex, brfss2013$marital)
names(count_marital) <- c("sex", "marital", "count")
count_marital_filterd <- filter(count_marital, !is.na(sex), !is.na(marital))
count_marital_filterd
count_marital <-  count(brfss2013, brfss2013$sex, brfss2013$marital, brfss2013$genhlth)
names(count_marital) <- c("sex", "marital", "health", "count")
count_marital_filterd <- filter(count_marital, !is.na(sex), !is.na(marital))
count_marital_filterd
mutate(type = substring(count_marital_filterd$sex,1,1)) %>% count_marital_filterd$count
mutate(type = substring(count_marital_filterd$sex,1,1)) %>% count_marital_filterd$count
mutate(type = substring(count_marital_filterd$sex,1,1))
mutate(type = count_marital_filterd$sex)
f <- mutate(type = count_marital_filterd$sex)
f <- count_marital_filterd %>% mutate(type = count_marital_filterd$sex)
count_marital_filterd %>% mutate(type = substring(count_marital_filterd$sex,1,1))
count_marital_filterd %>% mutate(type = substring(count_marital_filterd$sex,1,1) + substring(count_marital_filterd$marital,1,1))
count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1)))
count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1), substitute(count_marital_filterd$health)))
count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1), substitute(count_marital_filterd$health,1,1)))
count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1)))
count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1), substitute(count_marital_filterd$health,1,1)))
count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), paste(substring(count_marital_filterd$marital,1,1), substitute(count_marital_filterd$health,1,1))))
count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1), substring(count_marital_filterd$marital,1,1)))
count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1), substring(count_marital_filterd$health,1,1)))
categories_count <- count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1), substring(count_marital_filterd$health,1,1)))
categories_count <- select(categories_count, type, count)
count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1), substring(count_marital_filterd$health,1,1)))
categories_count <- count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1), substring(count_marital_filterd$health,1,1)))
categories_count <- select(categories_count, type, count)
categories_count
ggplot(data = categories_count, aes(x = type, y = count)) + geom_histogram(binwidth = 1)
ggplot(data = categories_count, aes(x = type)) + geom_histogram(binwidth = 1)
ggplot(data = categories_count, aes(x = factor(type))) + geom_histogram(binwidth = 1)
ggplot(data = categories_count, aes(x = factor(type), y = count)) + geom_point()
ggplot(data = categories_count, aes(y = factor(type), x = count)) + geom_point()
sort(categories_count)
categories_count %>% arrange(desc(count))
categories_count <- count_marital_filterd %>% mutate(type = paste(substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1), substring(count_marital_filterd$health,1,1)))
# get type and count cols only
categories_count <- select(categories_count, type, count)
# sort data by count to make it more visible in plot
categories_count <- categories_count %>% arrange(desc(count))
ggplot(data = categories_count, aes(y = factor(type), x = count)) + geom_point()
categories_count <- categories_count %>% arrange(desc(count))
categories_count
ggplot(data = categories_count, aes(y = factor(type), x = count)) + geom_point()
ggplot(data = categories_count, aes(y = factor(type), x = count)) + geom_point()
categories_count
ggplot(data = categories_count, aes(y = factor(type), x = count)) + geom_point()
categories_count
ggplot(data = categories_count, aes(y = factor(type), x = count)) + geom_point()
sex_mar_hel <- select(brfss2013, sex, marital, health)
sex_mar_hel <- select(brfss2013, sex, marital)
sex_mar_hel <- select(brfss2013, sex, marital, health)
sex_mar_hel <- select(brfss2013, sex, marital, genhlth)
sex_mar_hel
ggplot(data = categories_count, aes(y = factor(type), x = count)) + geom_point()
categories_count <- count_marital_filterd %>% mutate(type = paste( substring(count_marital_filterd$health,1,1), substring(count_marital_filterd$sex,1,1), substring(count_marital_filterd$marital,1,1)))
# get type and count cols only
categories_count <- select(categories_count, type, count)
# sort data by count to make it more visible in priniting
categories_count <- categories_count %>% arrange(desc(count))
ggplot(data = categories_count, aes(y = factor(type), x = count)) + geom_point()
ggplot(data = categories_count, aes(y = factor(type), x = count)) + geom_point()
sex_mar_hel %>% group_by(sex, marital, genhlth) %>% summarise(count = n())
sex_mar_hel %>% group_by(sex, marital, genhlth) %>% summarise(count = n()) %>% filter(!is.na(genhlth))
sex_mar_hel %>% group_by(sex, marital, genhlth) %>% summarise(count = n()) %>% filter(!is.na(genhlth))[sex = Male]
sex_mar_hel %>% group_by(sex, marital, genhlth) %>% summarise(count = n()) %>% filter(!is.na(genhlth))[sex == "Male"]
sex_mar_hel %>% group_by(sex, marital, genhlth) %>% summarise(count = n()) %>% filter(!is.na(genhlth)) %>% filter(sex == "Male")
sex_mar_hel %>% group_by(sex, marital, genhlth) %>% summarise(count = n()) %>% filter(!is.na(genhlth)) %>% filter(sex == "Male", marital == "Divorced")
unique(brfss2013$marital)
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
MM
head(MM)
sex_mar_hel <- select(brfss2013, sex, marital, genhlth)
sex_mar_hel <- sex_mar_hel %>% group_by(sex, marital, genhlth) %>% summarise(count = n()) %>% filter(!is.na(genhlth))
# filter data of males
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
library(grid)
library(gridExtra)
# filter data of males
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
# plot
library(grid)
library(gridExtra)
plots <- list()
plots[[1]] <- ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[2]] <- ggplot(data = MD, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[3]] <- ggplot(data = MW, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[4]] <- ggplot(data = MN, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[5]] <- ggplot(data = MS, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[6]] <- ggplot(data = MA, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[7]] <- ggplot(data = FM, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[8]] <- ggplot(data = FD, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[9]] <- ggplot(data = FW, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[10]] <- ggplot(data = FN, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[11]] <- ggplot(data = FS, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[12]] <- ggplot(data = FA, aes(x = factor(genhlth), y = count)) + geom_point()
multiplot(plotlist = plots, cols = 3)
# filter data of males
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
# plot
library(grid)
library(gridExtra)
plots <- list()
plots[[1]] <- ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[2]] <- ggplot(data = MD, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[3]] <- ggplot(data = MW, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[4]] <- ggplot(data = MN, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[5]] <- ggplot(data = MS, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[6]] <- ggplot(data = MA, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[7]] <- ggplot(data = FM, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[8]] <- ggplot(data = FD, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[9]] <- ggplot(data = FW, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[10]] <- ggplot(data = FN, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[11]] <- ggplot(data = FS, aes(x = factor(genhlth), y = count)) + geom_point()
plots[[12]] <- ggplot(data = FA, aes(x = factor(genhlth), y = count)) + geom_point()
grid.arrange(plots, cols = 3)
# filter data of males
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
# plot
library(grid)
library(gridExtra)
old.par <- par(mfrow=c(12, 2))
plots <- list()
ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MA, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FA, aes(x = factor(genhlth), y = count)) + geom_point()
# grid.arrange(plots, cols = 3)
par(old.par)
# filter data of males
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
# plot
library(grid)
library(gridExtra)
old.par <- par(mfrow=c(2, 12))
plots <- list()
ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MA, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FA, aes(x = factor(genhlth), y = count)) + geom_point()
# grid.arrange(plots, cols = 3)
par(old.par)
# filter data of males
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
# plot
library(grid)
library(gridExtra)
# old.par <- par(mfrow=c(2, 12))
# plots <- list()
ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MA, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FA, aes(x = factor(genhlth), y = count)) + geom_point()
# grid.arrange(plots, cols = 3)
# par(old.par)
# filter data of males
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
# plot
ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MA, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FA, aes(x = factor(genhlth), y = count)) + geom_point()
# filter data of males
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
# plot
ggplot(data = MM, aes(x = genhlth, y = count)) + geom_point()
ggplot(data = MD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MA, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FA, aes(x = factor(genhlth), y = count)) + geom_point()
# filter data of males
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
# plot
ggplot(data = MM, aes(x = aa, y = count)) + geom_point()
# filter data of males
MM <- sex_mar_hel %>% filter(sex == "Male", marital == "Married")
MD <- sex_mar_hel %>% filter(sex == "Male", marital == "Divorced")
MW <- sex_mar_hel %>% filter(sex == "Male", marital == "Widowed")
MN <- sex_mar_hel %>% filter(sex == "Male", marital == "Never married")
MS <- sex_mar_hel %>% filter(sex == "Male", marital == "Separated")
MA <- sex_mar_hel %>% filter(sex == "Male", marital == "A member of an unmarried couple")
# filter data of females
FM <- sex_mar_hel %>% filter(sex == "Female", marital == "Married")
FD <- sex_mar_hel %>% filter(sex == "Female", marital == "Divorced")
FW <- sex_mar_hel %>% filter(sex == "Female", marital == "Widowed")
FN <- sex_mar_hel %>% filter(sex == "Female", marital == "Never married")
FS <- sex_mar_hel %>% filter(sex == "Female", marital == "Separated")
FA <- sex_mar_hel %>% filter(sex == "Female", marital == "A member of an unmarried couple")
# plot
ggplot(data = MM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = MA, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FM, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FD, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FW, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FN, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FS, aes(x = factor(genhlth), y = count)) + geom_point()
ggplot(data = FA, aes(x = factor(genhlth), y = count)) + geom_point()
